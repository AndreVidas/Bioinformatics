source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library("biomaRt")
source("https://bioconductor.org/biocLite.R")
biocLite("pathview")
library(pathview)
rm(list=ls())
# ref: http://www.sthda.com/english/articles/28-hierarchical-clustering-essentials/92-visualizing-dendrograms-ultimate-guide/
library(factoextra)
library(DESeq2)
library(biomaRt)
# Load data
# load mouse data
data_mouse <- read.table("../data/htseq-count/annotated_combined.counts", header = TRUE, stringsAsFactors = FALSE, row.names = 1)
dim(data_mouse)
head(data_mouse)
colnames(data_mouse)
# load TCGA human data
data_human <- read.table("../data/Archive/patient_expression.txt", header = TRUE, stringsAsFactors = FALSE, row.names = 1, sep = "\t", check.names = FALSE)
annotation_human <- read.table("../data/Archive/patient_annotations.txt", header = TRUE, stringsAsFactors = FALSE, row.names = 1, sep = "\t")
dim(data_human)
dim(annotation_human)
head(data_human)
# find genes in common between human and mouse
geneIntersection <- intersect(rownames(data_human), toupper(data_mouse$symbol))
# filter out non-common genes in human and mouse
data_human <- data_human[rownames(data_human) %in% geneIntersection,]
dim(data_human)
data_mouse <- data_mouse[toupper(data_mouse$symbol) %in% geneIntersection,]
dim(data_mouse)
# REMOVE duplicated genes (for now, only 23 genes). Maybe later sum duplicated genes
#data_mouse[duplicated(data_mouse$symbol), "symbol"]
#data_mouse[data_mouse$symbol == "Dpep2",]
dim(data_mouse)
data_mouse <- data_mouse[!duplicated(data_mouse$symbol),]
dim(data_mouse)
# check whether mouse and human contain the same amount of genes, and hence the same genes (since only duplicates made the difference in amount).
dim(data_mouse)[1] == dim(data_human)[1]
# insert genenames as rownames for mouse
rownames(data_mouse) <- toupper(data_mouse$symbol)
# select relevant columns for mouse
data_mouse_selected <- data_mouse[,c(grep("recipient", names(data_mouse), value = TRUE), grep("mouse", names(data_mouse), value = TRUE))]
colnames(data_mouse_selected)
#### START: TPM normalize mouse data (and remove genes where gene length could be found in biomaRt)
#mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
#geneLength <- getBM(attributes = c("ensembl_gene_id", "mgi_symbol","start_position", "end_position"), mart = mouse)
#geneLength$gene_length <- (geneLength$end_position - geneLength$start_position)/1e3
# remove genes with no lengths identified by biomaRt
#data_mouse_selected <- data_mouse_selected[rownames(data_mouse_selected) %in% toupper(geneLength$mgi_symbol),]
# match geneLength data to data_mouse_selected
#geneLength_matched <- geneLength[match(rownames(data_mouse_selected), toupper(geneLength$mgi_symbol), nomatch = FALSE),]
# check that both data contains the same genes in the same order
#all(toupper(geneLength_matched$mgi_symbol) == rownames(data_mouse_selected))
# normalize for gene lenth
#for(i in 1:nrow(data_mouse_selected)){
#    data_mouse_selected[i,] <- data_mouse_selected[i,]/geneLength_matched$gene_length[i]
#}
# normalize for depth
#depth_scale_factor <- colSums(data_mouse_selected)/1e6 # find depth scaling factor
#for(i in 1:ncol(data_mouse_selected)){
#    data_mouse_selected[,i] <- data_mouse_selected[,i]/depth_scale_factor[i]
#}
#colSums(data_mouse_selected)
#### END: TPM normalize mouse data (and remove genes where gene length could be found in biomaRt)
colSums(data_mouse_selected)
# create labels for mouse
label_mouse <- sapply(colnames(data_mouse_selected), FUN = function(x) unlist(strsplit(x, split = "\\."))[1])
# change columns names to labels in data_mouse_selected
colnames(data_mouse_selected) <- label_mouse[match(colnames(data_mouse_selected),names(label_mouse))]
colnames(data_mouse_selected) <- paste0(colnames(data_mouse_selected), "_mouse")
# create labels for human
label_human <- annotation_human[match(colnames(data_human), annotation_human$analysis_id),"patient_class"]
names(label_human) <- colnames(data_human)
# remove "" and NFD from labels
label_human <- label_human[!is.na(label_human) & label_human != ""]
# select relevant columns for human
data_human_selected <- data_human[, names(label_human)]
head(data_human_selected)
# change columns names to labels in data_human_selected
colnames(data_human_selected) <- label_human[match(colnames(data_human_selected),names(label_human))]
# merge human and mouse together by gene name
data_mouse_selected <- data_mouse_selected[match(rownames(data_human_selected), rownames(data_mouse_selected)),]
# check that all gene names comes in the same order
all(rownames(data_mouse_selected) == rownames(data_human_selected))
rm(list=ls())
rm(list=ls())
library(biomaRt)
library(topGO)
rm(list=ls())
#library(biomaRt)
library(topGO)
# load gene list
geneList <- read.csv(file = "../../../projects/nfd/results/DE_genes/MllAF9_vs_NF.csv", row.names = 1, as.is = TRUE)
setwd("~/Documents/scripts/Bioinformatics/R")
rm(list=ls())
#library(biomaRt)
library(topGO)
# load gene list
geneList <- read.csv(file = "../../../projects/nfd/results/DE_genes/MllAF9_vs_NF.csv", row.names = 1, as.is = TRUE)
dim(geneList)
# convert geneList to topGO input format
#ensmusg_entrezgene <- getBM(attributes = c("ensembl_gene_id", "mgi_symbol","entrezgene", "gene_biotype"), filters='biotype', values=c('protein_coding'), mart = mouse)
#entrezgenes <- ensmusg_entrezgene[match(rownames(geneList), ensmusg_entrezgene$ensembl_gene_id, nomatch = FALSE),"entrezgene"]
#DEgenes <- geneList$padj
#names(DEgenes) <- entrezgenes
geneUni <- geneList$padj
names(geneUni) <- rownames(geneList)
# GO enrichment analysis
#library(biomaRt)
library(org.Mm.eg.db)
library(topGO)
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneUni, geneSel = function(p) p < 0.01, description = "Test", annot = annFUN.org, mapping = "org.Mm.eg.db", ID = "Ensembl")
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
GenTable(GOdata, classicFisher = resultFisher, topNodes = 10)
GenTable(GOdata, classicFisher = resultFisher, topNodes = 10)
resultFisher
# GO enrichment analysis
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneUni, geneSel = function(p) p < 0.01, description = "Mouse GO Enrichment Analysis", annot = annFUN.org, mapping = "org.Mm.eg.db", ID = "Ensembl")
# GO enrichment analysis
GOdata <- new("topGOdata", ontology = "BP", allGenes = geneUni, geneSel = function(p) p < 0.01, description = "Mouse GO Enrichment Analysis", ID = "Ensembl", mapping = "org.Mm.eg.db", annot = annFUN.org)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
GenTable(GOdata, classicFisher = resultFisher, topNodes = 10)
GenTable(GOdata, classicFisher = resultFisher, topNodes = 30)
