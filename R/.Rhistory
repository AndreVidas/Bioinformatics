source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5"
biocLite("rhdf5")
biocLite("rhdf5")
library("devtools", lib.loc="C:/Program Files/R/R-3.3.2/library")
devtools::install_github("pachterlab/sleuth")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.3.2/library")
conda install --channel bioconda r-sleuth
install.packages("scales")
library("sleuth")
devtools::install_github("pachterlab/sleuth")
install.packages("tibble")
library("sleuth")
devtools::install_github("pachterlab/sleuth")
install.packages("DBI")
library("sleuth")
devtools::install_github("pachterlab/sleuth")
install.packages("magrittr")
devtools::install_github("pachterlab/sleuth")
library("sleuth", lib.loc="C:/Program Files/R/R-3.3.2/library")
load("E:/RNAseq_HSC_kallisto_sleuth_transcriptlevel.RData")
sleuth_live(so_trans)
library("shiny", lib.loc="C:/Program Files/R/R-3.3.2/library")
install.packages('shiny')
sleuth_live(so_trans)
library(readr)
jhoeri <- read_csv("C:/Users/User/Desktop/jhoeri.txt")
View(jhoeri)
countdata <- read.table("jhoeri.txt")
countdata <- read.table("jhoeri.txt")
library(readr)
jhoeri_txt <- read_csv("C:/Users/User/Desktop/jhoeri.txt.txt")
View(jhoeri_txt)
countdata <- as.matrix(countdata)
library(readr)
jhoeri_txt <- read_csv("C:/Users/User/Desktop/jhoeri.txt.txt")
View(jhoeri_txt)
countdata <- read.table("jhoeri.txt")
countdata <- read.table("jhoeri_txt")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq")
rm(list=ls())
library(ComplexHeatmap)
library(circlize)
# make matrix example of case and control setup
data <- cbind( matrix(rnorm(80, 20), 8, 4) , matrix(rnorm(80, -10), 8, 4) )
rownames(data) = paste0("gene_", 1:8)
colnames(data) = paste0("sample_", 1:8)
Heatmap(data, name = "RNA expression",
bottom_annotation_height = unit(3, "cm"),  col = colorRamp2(c(min(data),
0, max(data)), c("blue", "white", "red")), show_row_dend = FALSE, show_column_dend = FALSE)
library(DESeq)
options(digits=3, width=100)
datafile = system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
datafile
datafile = system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
datafile
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("pasilla")
datafile = system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
datafile
pasillaCountTable = read.table( datafile, header=TRUE, row.names=1 )
pasillaCountTable
head( pasillaCountTable )
pasillaDesign = data.frame(
row.names = colnames( pasillaCountTable ),
condition = c( "untreated", "untreated", "untreated",
"untreated", "treated", "treated", "treated" ),
libType = c( "single-end", "single-end", "paired-end",
"paired-end", "single-end", "paired-end", "paired-end" ) )
pasillaDesign
pairedSamples = pasillaDesign$libType == "paired-end"
pairedSamples
countTable = pasillaCountTable[ , pairedSamples ]
countTable
condition = pasillaDesign$condition[ pairedSamples ]
condition
countTable
condition
head(countTable)
condition
stopifnot( identical( condition, factor( c( "untreated", "untreated", "treated", "treated" ) ) ) )
library( "DESeq" )
cds = newCountDataSet( countTable, condition )
cds
cds = estimateSizeFactors( cds )
cds
sizeFactors( cds )
head( counts( cds, normalized=TRUE ) )
cds
counts( cds, normalized=TRUE )
head( counts( cds, normalized=TRUE ) )
cds = estimateDispersions( cds )
cds
str( fitInfo(cds) )
plotDispEsts( cds )
all(table(conditions(cds))==2)
head( fData(cds) )
all(table(conditions(cds))==2)
head(countTable)
head( fData(cds) )
res = nbinomTest( cds, "untreated", "treated" )
head(res)
stopifnot(identical(colnames(res), c("id", "baseMean", "baseMeanA", "baseMeanB", "foldChange",
"log2FoldChange", "pval", "padj")))
plotMA(res)
hist(res$pval, breaks=100, col="skyblue", border="slateblue", main="")
resSig = res[ res$padj < 0.1, ]
resSig
head( resSig[ order(resSig$pval), ] )
resSig
head( resSig[ order(resSig$pval), ] )
head( resSig[ order( resSig$foldChange, -resSig$baseMean ), ] )
head( resSig[ order( -resSig$foldChange, -resSig$baseMean ), ] )
ncu = counts( cds, normalized=TRUE )[ , conditions(cds)=="untreated" ]
ncu
head(ncu)
plotMA(data.frame(baseMean = rowMeans(ncu),
log2FoldChange = log2( ncu[,2] / ncu[,1] )),
col = "black")
cdsUUT = cds[ , 1:3]
cdsUUT
pData( cdsUUT )
cdsUUT = estimateSizeFactors( cdsUUT )
cdsUUT = estimateDispersions( cdsUUT )
resUUT = nbinomTest( cdsUUT, "untreated", "treated" )
plotMA(resUUT)
cds2 = cds[ ,c(  "untreated3", "treated3"   ) ]
cds2
cds2 = estimateDispersions( cds2, method="blind", sharingMode="fit-only" )
res2 = nbinomTest( cds2, "untreated", "treated" )
cds2
res2 = nbinomTest( cds2, "untreated", "treated" )
plotMA(res2)
addmargins( table( res_sig = res$padj < .1, res2_sig = res2$padj < .1 ) )
head( pasillaCountTable )
pasillaDesign
cdsFull = newCountDataSet( pasillaCountTable, pasillaDesign )
cdsFull = estimateSizeFactors( cdsFull )
cdsFull = estimateDispersions( cdsFull )
cdsFull
cdsFull = estimateDispersions( cdsFull )
cdsFull
plotDispEsts( cdsFull )
fit1 = fitNbinomGLMs( cdsFull, count ~ libType + condition )
warnings()
fit0 = fitNbinomGLMs( cdsFull, count ~ libType  )
condition
str(fit1)
pvalsGLM = nbinomGLMTest( fit1, fit0 )
pvalsGLM
padjGLM = p.adjust( pvalsGLM, method="BH" )
padjGLM
tab1 = table( "paired-end only" = res$padj < .1, "all samples" = padjGLM < .1 )
tab1
addmargins( tab1 )
table(sign(fitInfo(cds)$perGeneDispEsts - fitInfo(cdsFull)$perGeneDispEsts))
trsf = function(x) log( (x + sqrt(x*x+1))/2 )
plot( trsf(fitInfo(cds)$perGeneDispEsts),
trsf(fitInfo(cdsFull)$perGeneDispEsts), pch=16, cex=0.45, asp=1)
abline(a=0, b=1, col="red3")
head(fit1)
cdsFullB = newCountDataSet( pasillaCountTable, pasillaDesign$condition )
cdsFullB = estimateSizeFactors( cdsFullB )
cdsFullB = estimateDispersions( cdsFullB )
resFullB = nbinomTest( cdsFullB, "untreated", "treated" )
tab2 = table(
`all samples simple` = resFullB$padj < 0.1,
`all samples GLM`    = padjGLM < 0.1 )
addmargins(tab2)
rs = rowSums ( counts ( cdsFull ))
theta = 0.4
use = (rs > quantile(rs, probs=theta))
table(use)
cdsFilt = cdsFull[ use, ]
cdsFilt
stopifnot(!any(is.na(use)))
fitFilt1  = fitNbinomGLMs( cdsFilt, count ~ libType + condition )
fitFilt0  = fitNbinomGLMs( cdsFilt, count ~ libType  )
pvalsFilt = nbinomGLMTest( fitFilt1, fitFilt0 )
padjFilt  = p.adjust(pvalsFilt, method="BH" )
cds = estimateSizeFactors( cds )
cds
sizeFactors( cds )
head( counts( cds, normalized=TRUE ) )
cds = estimateDispersions( cds )
cds
cdsFullB = newCountDataSet( pasillaCountTable, pasillaDesign$condition )
cdsFullB
cdsFullB = estimateSizeFactors( cdsFullB )
cdsFullB
cdsFullB = estimateDispersions( cdsFullB )
cdsFullB
resFullB = nbinomTest( cdsFullB, "untreated", "treated" )
str( fitInfo(cds) )
str( fitInfo(cds)$perGeneDispEsts
###################################################
### code chunk number 14: figFit
###################################################
plotDispEsts( cds )
###################################################
### code chunk number 15: DESeq.Rnw:309-310
###################################################
all(table(conditions(cds))==2)
###################################################
### code chunk number 16: head
###################################################
head( fData(cds) )
###################################################
### code chunk number 17: nbt1
###################################################
res = nbinomTest( cds, "untreated", "treated" )
###################################################
### code chunk number 18: nbt2
###################################################
head(res)
###################################################
### code chunk number 19: checkClaims
###################################################
stopifnot(identical(colnames(res), c("id", "baseMean", "baseMeanA", "baseMeanB", "foldChange",
"log2FoldChange", "pval", "padj")))
###################################################
### code chunk number 20: figDE
###################################################
plotMA(res)
###################################################
### code chunk number 21: histp
###################################################
hist(res$pval, breaks=100, col="skyblue", border="slateblue", main="")
###################################################
### code chunk number 22: ressig1
###################################################
resSig = res[ res$padj < 0.1, ]
###################################################
### code chunk number 23: ressig2
###################################################
head( resSig[ order(resSig$pval), ] )
###################################################
### code chunk number 24: ressig3
###################################################
head( resSig[ order( resSig$foldChange, -resSig$baseMean ), ] )
###################################################
### code chunk number 25: ressig4
###################################################
head( resSig[ order( -resSig$foldChange, -resSig$baseMean ), ] )
###################################################
### code chunk number 26: writetable
###################################################
write.csv( res, file="My Pasilla Analysis Result Table.csv" )
###################################################
### code chunk number 27: ncu
###################################################
ncu = counts( cds, normalized=TRUE )[ , conditions(cds)=="untreated" ]
###################################################
### code chunk number 28: MArepl
###################################################
plotMA(data.frame(baseMean = rowMeans(ncu),
log2FoldChange = log2( ncu[,2] / ncu[,1] )),
col = "black")
###################################################
### code chunk number 29: subset
###################################################
cdsUUT = cds[ , 1:3]
pData( cdsUUT )
###################################################
### code chunk number 30: est123
###################################################
cdsUUT = estimateSizeFactors( cdsUUT )
cdsUUT = estimateDispersions( cdsUUT )
resUUT = nbinomTest( cdsUUT, "untreated", "treated" )
str( fitInfo(cds) )$perGeneDispEsts
str( fitInfo(cds) )[1]
str( fitInfo(cds) )[[1]]
str( fitInfo(cds) )$dispFunc
plotDispEsts( cds )
?nbinomTest
library(DESeq2)
library(DESeq)
library(DESeq)
rm(list=ls())
library(DESeq)
?newCountDataSetFromHTSeqCount”
?newCountDataSetFromHTSeqCount()
> # Table 13.6
# Agresti, p. 561
black <- c(119,16,12,7,3,2,0)
white <- c(1070,60,14,4,0,0,1)
resp <- c(rep(0:6,times=black), rep(0:6,times=white))
race <- factor(c(rep("black", sum(black)), rep("white", sum(white))), levels = c("white","black"))
victim <- data.frame(resp, race)
table(race)
with(victim, tapply(resp, race, mean))
with(victim, tapply(resp, race, var))
table(resp, race)
# Poisson model
pGLM <- glm(resp ~ race, data=victim, family = poisson)
pGLM
summary(pGLM)
exp(coef(pGLM)[2])
coef(pGLM)[2]
victim$resp[victim$race=="white"]
mean(victim$resp[victim$race=="white"])
mean(victim$resp[victim$race=="black"])
exp(predict(pGLM, newdata = data.frame(race=c("white","black"))))
fmeans <- exp(predict(pGLM, newdata = data.frame(race = c("white","black"))))
fmeans
fmeans
fmeans <- exp(predict(pGLM, newdata = data.frame(race = c("white","black"))))
fmeans
binom.test(2,30,p = 0.5)
binom.test(c(2,3,4,5),30,p = 0.5)
binom.test(1,30,p = 0.5)
rm(list=ls())
library(DESeq2)
library(gplots)
#### load count data
sampleTable_exp <- data.frame(sampleName = c("sg26_4d_ctrl_R1", "sg26_4d_ctrl_R2", "sg26_4d_ctrl_R3", "sg26_4d_dox_R1", "sg26_4d_dox_R2", "sg26_4d_dox_R3"), fileName = c("Galaxy92-[htseq-count_on_sg26_4d_ctrl_R1].tabular", "Galaxy94-[htseq-count_on_sg26_4d_ctrl_R2].tabular", "Galaxy96-[htseq-count_on_sg26_4d_ctrl_R3].tabular", "Galaxy98-[htseq-count_on_sg26_4d_dox_R1].tabular", "Galaxy100-[htseq-count_on_sg26_4d_dox_R2].tabular", "Galaxy102-[htseq-count_on_sg26_4d_dox_R3].tabular"), condition = c("ctrl", "ctrl", "ctrl", "trt", "trt", "trt"))
data_exp <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_exp,
directory = "dataChunqin/",
design= ~ condition)
setwd("C:/Users/User/Desktop/Andre/Bioinformatics/R")
#### load count data
sampleTable_exp <- data.frame(sampleName = c("sg26_4d_ctrl_R1", "sg26_4d_ctrl_R2", "sg26_4d_ctrl_R3", "sg26_4d_dox_R1", "sg26_4d_dox_R2", "sg26_4d_dox_R3"), fileName = c("Galaxy92-[htseq-count_on_sg26_4d_ctrl_R1].tabular", "Galaxy94-[htseq-count_on_sg26_4d_ctrl_R2].tabular", "Galaxy96-[htseq-count_on_sg26_4d_ctrl_R3].tabular", "Galaxy98-[htseq-count_on_sg26_4d_dox_R1].tabular", "Galaxy100-[htseq-count_on_sg26_4d_dox_R2].tabular", "Galaxy102-[htseq-count_on_sg26_4d_dox_R3].tabular"), condition = c("ctrl", "ctrl", "ctrl", "trt", "trt", "trt"))
data_exp <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_exp,
directory = "dataChunqin/",
design= ~ condition)
data_exp <- as.matrix(counts(data_exp))
head(data_exp)
#### load count data
sampleTable_exp <- data.frame(sampleName = c("sg26_4d_ctrl_R1", "sg26_4d_ctrl_R2", "sg26_4d_ctrl_R3", "sg26_4d_dox_R1", "sg26_4d_dox_R2", "sg26_4d_dox_R3"), fileName = c("Galaxy92-[htseq-count_on_sg26_4d_ctrl_R1].tabular", "Galaxy94-[htseq-count_on_sg26_4d_ctrl_R2].tabular", "Galaxy96-[htseq-count_on_sg26_4d_ctrl_R3].tabular", "Galaxy98-[htseq-count_on_sg26_4d_dox_R1].tabular", "Galaxy100-[htseq-count_on_sg26_4d_dox_R2].tabular", "Galaxy102-[htseq-count_on_sg26_4d_dox_R3].tabular"), condition = c("ctrl", "ctrl", "ctrl", "trt", "trt", "trt"))
data_exp <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_exp,
directory = "dataChunqin/",
design= ~ condition)
setwd("C:/Users/User/Desktop/Andre/Bioinformatics/R")
#### load count data
sampleTable_exp <- data.frame(sampleName = c("sg26_4d_ctrl_R1", "sg26_4d_ctrl_R2", "sg26_4d_ctrl_R3", "sg26_4d_dox_R1", "sg26_4d_dox_R2", "sg26_4d_dox_R3"), fileName = c("Galaxy92-[htseq-count_on_sg26_4d_ctrl_R1].tabular", "Galaxy94-[htseq-count_on_sg26_4d_ctrl_R2].tabular", "Galaxy96-[htseq-count_on_sg26_4d_ctrl_R3].tabular", "Galaxy98-[htseq-count_on_sg26_4d_dox_R1].tabular", "Galaxy100-[htseq-count_on_sg26_4d_dox_R2].tabular", "Galaxy102-[htseq-count_on_sg26_4d_dox_R3].tabular"), condition = c("ctrl", "ctrl", "ctrl", "trt", "trt", "trt"))
data_exp <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_exp,
directory = "dataChunqin/",
design= ~ condition)
library(DESeq2)
library(gplots)
#### load count data
sampleTable_exp <- data.frame(sampleName = c("sg26_4d_ctrl_R1", "sg26_4d_ctrl_R2", "sg26_4d_ctrl_R3", "sg26_4d_dox_R1", "sg26_4d_dox_R2", "sg26_4d_dox_R3"), fileName = c("Galaxy92-[htseq-count_on_sg26_4d_ctrl_R1].tabular", "Galaxy94-[htseq-count_on_sg26_4d_ctrl_R2].tabular", "Galaxy96-[htseq-count_on_sg26_4d_ctrl_R3].tabular", "Galaxy98-[htseq-count_on_sg26_4d_dox_R1].tabular", "Galaxy100-[htseq-count_on_sg26_4d_dox_R2].tabular", "Galaxy102-[htseq-count_on_sg26_4d_dox_R3].tabular"), condition = c("ctrl", "ctrl", "ctrl", "trt", "trt", "trt"))
data_exp <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_exp,
directory = "dataChunqin/",
design= ~ condition)
